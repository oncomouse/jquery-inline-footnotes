(function (factory) {
    if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module.
        define(['jquery'], factory);
    } else {
        // Browser globals
        factory(jQuery);
    }
}(function ($) {
	$.inlineFootnotes = function( options ) {
		
		var opts = $.extend( {}, $.inlineFootnotes.defaults, options );
		
		var $stylesheet = $.inlineFootnotes.attachNewStylesheet();
		
		if($('*[data-inlined=true]').length > 0) {
			return true;
		}

		$('sup[id^="' + opts['footNoteRefID'] + '"]').each(function(i) {
			var $footnoteRef = $(this);

			// Make sure the parent (usually a paragraph) can have content positioned relative to it:
			$footnoteRef.parent().css('position', 'relative');

			var footnoteID = $footnoteRef.attr('id').replace(opts['footNoteRefID'],"");
			var footnoteNumber = i + 1;

			// Whoever thought it was a good idea to put colons in the IDs of autogenerated footnotes is a real meany:
			var $footnote = $('*[id="'+ opts['footNoteID'] + footnoteID + '"]');
			var $newFootnote = $('<span class="inline-footnote closed" id="' + opts['inlineFootNoteID'] + footnoteID+'">' + $footnote.html() + '</span>');
			
			$footnote.parent().hide();
			$footnote.parent().attr('data-inlined', true);

			$newFootnote.find('p:first-child').html('<sup>' + footnoteNumber + '</sup>' + $newFootnote.find('p:first-child').html());

			$footnoteRef.after($newFootnote);

			var $footnoteLink = $footnoteRef.find('a');
			$footnoteLink.attr('href','#');
	
			$footnoteLink.click(function(e) {
				e.preventDefault();
				var footnoteNumber = $(this).parent().attr('id').replace(opts['footNoteRefID'],"");
				$('#' + opts['inlineFootNoteID'] + footnoteID).toggleClass('closed opened');
				return false;
			});
		});

		$(window).resize(function() {
			// Detect if we're using a mediaQuery to detect window width or jQuery:
			var test = ($(window).width() <= opts['columnWidth']);
			if (opts['mediaQuery'] !== null) {
				test = !(window.matchMedia(opts['mediaQuery']).matches);
			}
			
			if(test) {
				$('sup[id^="' + opts['footNoteRefID'] + '"]').each(function() { 
					var $footnoteRef = $(this);
					var footnoteID = $footnoteRef.attr('id').replace(opts['footNoteRefID'],"");
					$.inlineFootnotes.addCSSRule($stylesheet, '#' + opts['inlineFootNoteID'] + footnoteID+':before, #' + opts['inlineFootNoteID'] +footnoteID+':after', 'left: ' + ($footnoteRef.offset().left - $footnoteRef.parent().offset().left) + 'px !important;', -1);	
				});
			} else {
				var footnotes = $('*[id^="'+opts['inlineFootNoteID']+'"]');
				var footnoteIDs = footnotes.map(function() { return $(this).attr('id').replace(opts['inlineFootNoteID'], ''); });
				
				// Grab a list of overlapping footnotes from jquery.overlap
				var overlaps = footnotes.overlaps();
				var count = 0;
				
				// Loop on a list of all overlapping sidebar footnotes to position them properly:
				while(overlaps.length > 0 && count < opts['maxCollisionCycles']) {
					if (opts['DEBUG']) {
						console.log("running collision detection");
					}
				
					// From a list of all possible overlaps, we have to calculate which elements overlap with which:
					var collisions = [];
					overlaps.each(function(i) {
						// The footnote in question blessed with jQuery and IDed:
						var $footnote = $(this);
						var footnoteID = $footnote.attr('id').replace(opts['inlineFootNoteID'],"");
						var footnoteNumber = $.inArray(footnoteIDs, footnoteID) + 1;
						
						// Filter array to remove the footnote in question (TBH, I don't know why this works):
						var filteredFootnotes = footnotes.filter(function(x) { return parseInt(x) !== parseInt(footnoteNumber - 1); });
						// Go through the rest of the footnotes and see who overlaps with the footnote in question:
						filteredFootnotes.each(function() {
							var $testFootnote = $(this);
							var testFootnoteID = $testFootnote.attr('id').replace(opts['inlineFootNoteID'],"");
							if ($footnote.overlaps('#' + $testFootnote.attr('id')).length > 0) {
								// Check if we've already detected the collision (if 1 overlaps 2, then 2 overlaps 1 will also be a collision):
								// We also have to sort using footnote number (which is document order) in order to make sure that the earliest footnote remains on top.
								var tempCollision = [footnoteID, testFootnoteID].sort(function(a,b) { return $.inArray(footnoteIDs, a) - $.inArray(footnoteIDs, b); });
								// There is probably an easier way to do this, but .indexOf doesn't support multidimensional arrays:
								var searchedCollisions = collisions.filter(function(x) { return ((x[0] === tempCollision[0] && x[1] === tempCollision[1]) || (x[1] === tempCollision[0] && x[0] === tempCollision[1])) } );
								if (searchedCollisions.length === 0){
									collisions.push(tempCollision);
								}
							}
						});
					});
					// Resolve collisions:
					$(collisions).each(function() {
						var $collider1 = $('#' + opts['inlineFootNoteID'] + this[0]);
						var $collider2 = $('#' + opts['inlineFootNoteID'] + this[1]);
					
						// Calculate degree of overlap:
						var overlap = $collider1.offset().top + $collider1.height() - $collider2.offset().top;
					
						// Shift second collider down by that overlap, plus a user-defined padding:
						$collider2.offset({top: $collider2.offset().top + overlap + opts['overlapOffset']});
					});
				
					// Make sure all collisions are resolved:
					overlaps = footnotes.overlaps();
					// Update count:
					count++;
				}
			}
		}).resize();
	}
	
	// Function to create a new stylesheet, attach it to the document, and return it as a JS object:
	$.inlineFootnotes.attachNewStylesheet = function () {
		var style = document.createElement("style");

		// Add a media (and/or media query) here if you'd like!
		// style.setAttribute("media", "screen")
		// style.setAttribute("media", "only screen and (max-width : 1024px)")

		// WebKit hack :(
		style.appendChild(document.createTextNode(""));
		document.head.appendChild(style);

		return style.sheet;
	}

	// Cross browser function to add a CSS rule to a stylesheet:
	$.inlineFootnotes.addCSSRule = function(sheet, selector, rules, index) {
		// index == -1 SHOULD put rules at the end of the sheet, but, at least in Chrome, it doesn't, hence:
		if (index < 0) {
			index = sheet.rules.length;
		}
		if("insertRule" in sheet) {
	
			sheet.insertRule(selector + "{" + rules + "}", index);
		}
		else if("addRule" in sheet) {
			sheet.addRule(selector, rules, index);
		}
	}
	
	$.inlineFootnotes.defaults = {
		columnWidth: 1155, // minimum width of the screen necessary to display footnotes
		mediaQuery: null, // copy & paste the media query from your CSS file, if you prefer (and have polyfilled window.matchMedia)
		overlapOffset: 5, // padding (in pixels) between overlapping footnotes
		footNoteID: 'fn:', // base string of ID for footnotes
		footNoteRefID: 'fnref:', // base string of ID for footnote reference links
		inlineFootNoteID: 'fnote_', // base string of the IDs of elements we are attaching
		maxCollisionCycles: 8, // Number of iterations of collision detection to run, may need to increase.
		DEBUG: false // Display debugging information?
	};
}));